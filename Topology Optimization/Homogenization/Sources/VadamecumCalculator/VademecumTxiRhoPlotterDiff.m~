classdef VademecumTxiRhoPlotterDiff < VademecumPlotter
    
    properties (SetAccess = private, GetAccess = public)
        feasibleIndex
    end
    
    properties (Access = protected)
        XYname = ' TxiRho'
    end
    
    properties (Access = private)
        mxT
        myT
        chi
        indexFeasibleSmooth
        indexFeasibleNonSmooth
        smoothDB        
        nonSmoothDB
        txiN
        rhoN
        iN
        txiS
        rhoS
        iS
    end
    
    methods (Access = public)
        
        function obj = VademecumTxiRhoPlotterDiff(d)
            obj.init(d);
            obj.indexFeasibleSmooth    = d.iS;
            obj.indexFeasibleNonSmooth = d.iN;
            obj.computeTxiMxMyVariables();
            obj.txiN = obj.chi(obj.iN);
            obj.rhoN = obj.nonSmoothDB.volume(obj.iN);
            obj.txiS = obj.chi(obj.iS);
            obj.rhoS = obj.nonSmoothDB.volume(obj.iS);            
        end
        
        function plot(obj)
            obj.plotMxMy();
            obj.plotHomogenizedTensor();
            obj.plotAmplificatorTensor();
        end
        
    end
    
    methods (Access = private)
        
        function init(obj,d)
            obj.smoothDB    = d.smoothDB;
            obj.nonSmoothDB = d.nonSmoothDB;
            obj.mxV = obj.nonSmoothDB.mx;
            obj.myV = obj.nonSmoothDB.my;
            obj.iS = d.iS;
            obj.iN = d.iN;
        end
        
        function computeTxiMxMyVariables(obj)
            for i = 1:length(obj.mxV)
                for j = 1:length(obj.myV)
                    mx = obj.mxV(i);
                    my = obj.myV(j);
                    obj.chi(i,j) = mx/my;
                    obj.mxT(i,j) = mx;
                    obj.myT(i,j) = my;
                end
            end
        end
              
        function plotMxMy(obj)
            obj.printWidthVariable(obj.mxT,'Mx');
            obj.printWidthVariable(obj.myT,'My');
        end
        
        function printWidthVariable(obj,val,name)
            obj.fileName    = name;
            obj.value2print = val;
            obj.plotFigure();
            obj.printFigure();
        end
        
        function computeDiff(obj,varN,varS)
            zN = varN(obj.iN);
       %     C1   = dN.Ctensor(1,1,:,:);
      %      C1 = squeeze(C1);
      %      Cn(:,1)   = C1(iN);
            
            
            rhoS = obj.smoothDB.volume(iS);
            txiS = txi(iS);
            
            C1   = dS.Ctensor(1,1,:,:);
            C1   = squeeze(C1);
            Cs(:,1)   = C1(iS);
            varS            
                       
            Cnp(:,1)  = griddata(txiN,rhoN,zN,txiS,rhoS);
            
            dif = Cs - Cnp;            
        end
        
    end
    
    methods (Access = protected)
        
        function plotHomogenizedTensor(obj)
            obj.tensor{1} = obj.C;
            obj.tensorCase = 'C_';
            obj.plotTensor();
        end
        
        function plotAmplificatorTensor(obj)
            obj.tensor = obj.invP;
            obj.tensorCase = 'Pinv_';
            obj.plotTensor();
        end     
        
        function obtainTensorComponent(obj)
            i = obj.iIndex;
            j = obj.jIndex;
            Tij = obj.tensor(i,j,:,:);
            Tij = squeeze(Tij);
            obj.value2print = Tij;
        end        
        
        function plotFigure(obj)
            x = obj.xV;
            y = obj.yV;
            z = obj.value2print;
            ind = ~isnan(z);
            ncolors = 50;
            tri = delaunay(x(ind),y(ind));
            tricontour(tri,x(ind),y(ind),z(ind),ncolors) 
            colorbar
            hold on
            plot(x,y,'+');
            xlabel('$\frac{m1}{m2}$','Interpreter','latex');
            ylabel('\rho');
            obj.addTitle();
        end        
        
    end
    
    
    
end