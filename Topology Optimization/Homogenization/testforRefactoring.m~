classdef testforRefactoring < test
    
    properties (Access = protected)
        FileName = 'testforRefactoring'
    end
    
    
    properties (Access = private)
      lambda
      mu
      E 
      nu
      lambda2D
      
      FractionVolume      
      
      FirstLaminateDirection
      SecondLaminateDirection
      
      FirstLaminationParameter
      SecondLaminationParameter
      
      ChChecked
      ChCheckedOld
      ChToCheck

    end
    
    methods (Access = public) 
        
        function obj = testforRefactoring()
            obj.loadLameParameters()
            obj.loadDirections()
            obj.loadLaminationParameters()
            obj.loadFractionVolume()
            obj.loadHomogenizedCheckedConstitutiveTensor()
            obj.computeTwoRankSequentialLaminate()
            obj.computeT


                        epsil = 1.0000e-03;
            obj.ChCheckedOld = SequentialLaminateHomogenizer.ChinvOld(obj.lambda,obj.lambda2D,obj.mu,obj.FirstLaminateDirection,obj.SecondLaminateDirection,obj.FirstLaminationParameter,obj.SecondLaminationParameter,obj.FractionVolume,epsil);
        end
        
        
    end
    
    methods (Access = protected)
        function hasPassed = hasPassed(obj)
            firstCheck = norm(double(obj.ChChecked) - double(obj.ChToCheck)) < 1e-14;
            secondCheck = norm(double(obj.ChCheckedOld) - double(obj.ChToCheck)) < 1e-4;
            hasPassed = firstCheck && secondCheck;
        end
    end
    
    methods (Access = private)
        
        function loadLameParameters(obj)
            obj.lambda = 0.7500;
            obj.mu = 0.3750;     
            obj.computeYoungFromMuAndLambda();
            obj.computePoissonFromMuAndLambda();
            obj.computeLambda2DFromYoungAndPoisson();
        end
        
        function computeYoungFromMuAndLambda(obj)
             obj.E = obj.mu*(3*obj.lambda+2*obj.mu)/(obj.lambda+obj.mu);              
        end
        
        function computePoissonFromMuAndLambda(obj)
            obj.nu =  obj.lambda/(2*(obj.lambda + obj.mu));
        end
        
        function computeLambda2DFromYoungAndPoisson(obj)                        
            obj.lambda2D = obj.E*obj.nu/(1+obj.nu)/(1-obj.nu);
        end
        
        function loadDirections(obj)
            obj.loadFirstDirection()
            obj.loadSecondDirection()
        end
        
        function loadFirstDirection(obj)
            direction = [1     0     0];
            obj.FirstLaminateDirection = obj.normalizeDirection(direction);
        end
        
        function loadSecondDirection(obj)
            direction = [1     3     2];
            obj.SecondLaminateDirection = obj.normalizeDirection(direction);
        end
        
        function loadLaminationParameters(obj)
            obj.FirstLaminationParameter = 0.8;
            obj.SecondLaminationParameter = 0.2;
        end
        
        function loadFractionVolume(obj)
            obj.FractionVolume = 0.8000;
        end
        
        function loadHomogenizedCheckedConstitutiveTensor(obj)
            obj.ChChecked = [   0.141319232095214  -0.148800617096403  -0.246695394937801
                               -0.148800617096403   0.642561104784655  -0.142148046862999
                               -0.246695394937801  -0.142148046862999   0.006542224049686];
        end
        
        function computeTwoRankSequentialLaminate(obj)
                        epsil = 1.0000e-03;
            obj.ChToCheck = SequentialLaminateHomogenizer.ChomogAllaire(obj.lambda,obj.mu,obj.FirstLaminateDirection,obj.SecondLaminateDirection,obj.FirstLaminationParameter,obj.SecondLaminationParameter,obj.FractionVolume,epsil);

        end
        
    end
    
    methods (Access = private, Static)
        function direction = normalizeDirection(direction)
            direction = direction/norm(direction);
        end
    end
    
    
    
end