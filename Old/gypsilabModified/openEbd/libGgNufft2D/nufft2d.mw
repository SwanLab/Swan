%
% Non-uniform FFT in R^2, version 1.3
% 
%     References:
%
%     [DR] Fast Fourier transforms for nonequispaced data,
%          A. Dutt and V. Rokhlin, SIAM J. Sci. Comput. 14, 
%          1368-1383, 1993.
%
%     [GL] Accelerating the Nonuniform Fast Fourier Transform,
%          L. Greengard and J.-Y. Lee, SIAM Review 46, 443-454 (2004).
%
%     [LG] The type 3 nonuniform FFT and its applications
%          J.-Y. Lee and L. Greengard, J. Comput. Phys. 206, 1-5 (2005).
%
%

@function fk=dirft2d1(nj,xj,yj,cj,iflag,ms,mt)
%DIRFT2D1: Direct (slow) computation of nonuniform FFT in R^2 - Type 1.
%
%  FK = DIRFT2D1(NJ,XJ,YJ,CJ,IFLAG,MS,MT);
%
%                  1  nj
%     fk(k1,k2) = -- SUM cj(j) exp(+/-i k1 xj(j)) exp(+/-i k2 yj(j)) 
%                 nj j=1
%
%     for -ms/2 <= k1 <= (ms-1)/2, -mt/2 <= k2 <= (mt-1)/2
%
%     If (iflag .ge.0) the + sign is used in the exponential.
%     If (iflag .lt.0) the - sign is used in the exponential.
%
%  Input parameters:
%
%     nj     number of sources   (integer)
%     xj,yj  location of sources (real *8)
%
%            on interval [-pi,pi].
%
%     cj     strengths of sources (complex *16)
%     iflag  determines sign of FFT (see above)
%     ms     number of Fourier modes computed (-ms/2 to (ms-1)/2 )
%     mt     number of Fourier modes computed (-mt/2 to (mt-1)/2 )
%                 
%  Output parameters:
%
%     fk     Fourier transform values (complex *16)
%
%

fk=zeros(ms,mt)+1i*zeros(ms,mt);

# FORTRAN dirft2d1(int[1] nj, double[] xj, double[] yj, dcomplex[] cj, int[1] iflag, int[1] ms, int[1] mt, inout dcomplex[] fk);


@function cj=dirft2d2(nj,xj,yj,iflag,ms,mt,fk)
%DIRFT2D2: Direct (slow) computation of nonuniform FFT in R^2 - Type 2.
%
%  CJ = DIRFT2D2(NJ,XJ,YJ,IFLAG,MS,MT,FK);
%
%     cj(j) = SUM   fk(k1,k2) exp(+/-i k1 xj(j)) exp(+/-i k2 yj(j)) 
%             k1,k2  
%                            for j = 1,...,nj
%
%     where -ms/2 <= k1 <= (ms-1)/2, -mt/2 <= k2 <= (mt-1)/2
%
%     If (iflag .ge.0) the + sign is used in the exponential.
%     If (iflag .lt.0) the - sign is used in the exponential.
%
%  Input parameters:
%
%     nj     number of output values   (integer)
%     xj,yj  location of output values (real *8 array)
%     iflag  determines sign of FFT (see above)
%     ms     number of Fourier modes given  [ -ms/2: (ms-1)/2 ]
%     mt     number of Fourier modes given  [ -mt/2: (mt-1)/2 ]
%     fk     Fourier coefficient values (complex *16 array)
%
%  Output parameters:
%
%     cj     output values (complex *16 array)
%
%

cj=zeros(nj,1)+1i*zeros(nj,1);

# FORTRAN dirft2d2(int[1] nj, double[] xj, double[] yj, inout dcomplex[] cj, int[1] iflag, int[1] ms, int[1] mt, dcomplex[] fk);


@function fk=dirft2d3(nj,xj,yj,cj,iflag,nk,sk,tk)
%DIRFT2D3: Direct (slow) computation of nonuniform FFT in R^2 - Type 3.
%
%  FK = DIRFT2D3(NJ,XJ,YJ,CJ,IFLAG,NK,SK,TK);
%
%                 1  nj
%     fk(k)    = -- SUM cj(j) exp(+/-i s(k) xj(j)) exp(+/-i t(k) yj(j)) 
%                nj j=1
%
%     If (iflag .ge.0) the + sign is used in the exponential.
%     If (iflag .lt.0) the - sign is used in the exponential.
%
%  Input parameters:
%
%     nj     number of sources   (integer)
%     xj,yj  location of sources (real *8)
%
%            on interval [-pi,pi].
%
%     cj     strengths of sources (complex *16)
%     iflag  determines sign of FFT (see above)
%     nk     number of (noninteger) Fourier modes computed
%     sk,tk  k-values (locations) of desired Fourier modes
%                 
%  Output parameters:
%
%     fk     Fourier transform values (complex *16)
%

fk=zeros(nk,1)+1i*zeros(nk,1);

# FORTRAN dirft2d3(int[1] nj, double[] xj, double[] yj, dcomplex[] cj, int[1] iflag, int[1] nk, double[] sk, double[] tk, inout dcomplex[] fk);


@function [fk,ier]=nufft2d1(nj,xj,yj,cj,iflag,eps,ms,mt)
%NUFFT2D1: Nonuniform FFT in R^2 - Type 1.
%
%  [FK,IER] = NUFFT2D1(NJ,XJ,YJ,CJ,IFLAG,EPS,MS,MT);
%
%                  1  nj
%     fk(k1,k2) = -- SUM cj(j) exp(+/-i k1 xj(j)) exp(+/-i k2 yj(j)) 
%                 nj j=1
%
%     for -ms/2 <= k1 <= (ms-1)/2, -mt/2 <= k2 <= (mt-1)/2
%
%     If (iflag .ge.0) the + sign is used in the exponential.
%     If (iflag .lt.0) the - sign is used in the exponential.
%
%  Input parameters:
%
%     nj     number of sources   (integer)
%     xj,yj  location of sources (real *8)
%
%            on interval [-pi,pi].
%
%     cj     strengths of sources (complex *16)
%     iflag  determines sign of FFT (see above)
%     eps    precision request  (between 1.0e-15 and 1.0e-1)
%     ms     number of Fourier modes computed (-ms/2 to (ms-1)/2 )
%     mt     number of Fourier modes computed (-mt/2 to (mt-1)/2 )
%                 
%  Output parameters:
%
%     fk     Fourier transform values (complex *16)
%     ier    error return code   
%            ier = 0  => normal execution.
%            ier = 1  => precision eps requested is out of range.
%
%

fk=zeros(ms,mt)+1i*zeros(ms,mt);
ier=0;

# FORTRAN nufft2d1f90(int[1] nj, double[] xj, double[] yj, dcomplex[] cj, int[1] iflag, double[1] eps, int[1] ms, int[1] mt, inout dcomplex[] fk, inout int[1] ier);


@function [cj,ier]=nufft2d2(nj,xj,yj,iflag,eps,ms,mt,fk)
%NUFFT2D2: Nonuniform FFT in R^2 - Type 2.
%
%  [CJ,IER] = NUFFT2D2(NJ,XJ,YJ,IFLAG,EPS,MS,MT,FK);
%
%     cj(j) = SUM   fk(k1,k2) exp(+/-i k1 xj(j)) exp(+/-i k2 yj(j)) 
%             k1,k2  
%                            for j = 1,...,nj
%
%     where -ms/2 <= k1 <= (ms-1)/2, -mt/2 <= k2 <= (mt-1)/2
%
%     If (iflag .ge.0) the + sign is used in the exponential.
%     If (iflag .lt.0) the - sign is used in the exponential.
%
%  Input parameters:
%
%     nj     number of output values   (integer)
%     xj,yj  location of output values (real *8 array)
%     iflag  determines sign of FFT (see above)
%     eps    precision request  (between 1.0e-15 and 1.0e-1)
%     ms     number of Fourier modes given  [ -ms/2: (ms-1)/2 ]
%     mt     number of Fourier modes given  [ -mt/2: (mt-1)/2 ]
%     fk     Fourier coefficient values (complex *16 array)
%
%  Output parameters:
%
%     cj     output values (complex *16 array)
%     ier    error return code   
%            ier = 0  => normal execution.
%            ier = 1  => precision eps requested is out of range.
%
%

cj=zeros(nj,1)+1i*zeros(nj,1);
ier=0;

# FORTRAN nufft2d2f90(int[1] nj, double[] xj, double[] yj, inout dcomplex[] cj, int[1] iflag, double[1] eps, int[1] ms, int[1] mt, dcomplex[] fk, inout int[1] ier);


@function [fk,ier]=nufft2d3(nj,xj,yj,cj,iflag,eps,nk,sk,tk)
%NUFFT2D3: Nonuniform FFT in R^2 - Type 3.
%
%  [FK,IER] = NUFFT2D3(NJ,XJ,YJ,CJ,IFLAG,NK,SK,TK);
%
%                 1  nj
%     fk(k)    = -- SUM cj(j) exp(+/-i s(k) xj(j)) exp(+/-i t(k) yj(j)) 
%                nj j=1
%
%     If (iflag .ge.0) the + sign is used in the exponential.
%     If (iflag .lt.0) the - sign is used in the exponential.
%
%  Input parameters:
%
%     nj     number of sources   (integer)
%     xj,yj  location of sources (real *8)
%
%            on interval [-pi,pi].
%
%     cj     strengths of sources (complex *16)
%     iflag  determines sign of FFT (see above)
%     eps    precision request  (between 1.0e-15 and 1.0e-1)
%     nk     number of (noninteger) Fourier modes computed
%     sk,tk  k-values (locations) of desired Fourier modes
%                 
%  Output parameters:
%
%     fk     Fourier transform values (complex *16)
%     ier    error return code   
%            ier = 0  => normal execution.
%            ier = 1  => precision eps requested is out of range.
%
%

fk=zeros(nk,1)+1i*zeros(nk,1);
ier=0;

# FORTRAN nufft2d3f90(int[1] nj, double[] xj, double[] yj, dcomplex[] cj, int[1] iflag, double[1] eps, int[1] nk, double[] sk, double[] tk, inout dcomplex[] fk, inout int[1] ier);


